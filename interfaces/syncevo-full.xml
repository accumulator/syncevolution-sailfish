<?xml version="1.0"?>
<node name="/" xmlns:doc="http://www.freedesktop.org/dbus/1.0/doc.dtd">
  <doc:doc>
    <doc:summary>SyncEvolution D-Bus Interface</doc:summary>
  </doc:doc>
  <interface name="org.Moblin.SyncEvolution">
    <doc:doc>
      <doc:para>
        The SyncEvolution object can be used to get and set configurations,
        to start synchronizations and to observe synchronization progress.
      </doc:para>
    </doc:doc>

    <method name="StartSync">
      <doc:doc>
        <doc:summary>Starts a synchronization. This function returns immediately,
          use Progress-signal to see when Synchronization is finished.
        </doc:summary>
      </doc:doc>
      <arg type="s" name="server" direction="in">
        <doc:doc>
          <doc:summary>Server name. Server must be already defined in SyncEvolution</doc:summary>
        </doc:doc>
      </arg>
      <arg type="a(si)" name="sources" direction="in">
        <doc:doc>
          <doc:summary>Source array with each source containing name and sync mode.
            If array is empty, all sources will be synchronized.
          </doc:summary>
        </doc:doc>
      </arg>
    </method>
    <method name="AbortSync">
      <doc:doc>
        <doc:summary>Aborts a synchronization. This function returns immediately,
          use Progress-signal to see when Synchronization is actually aborted.
        </doc:summary>
      </doc:doc>
      <arg type="s" name="server" direction="in" />
    </method>

    <!-- for now the progress signal args are a direct copy from synthesis -->
    <signal name="Progress">
      <doc:doc>
        <doc:summary>Signal for synchronization progress. The arguments come 
          from Synthesis, see TProgressEventEnum in engine_defs.h. Additionally 
          type -1 means "synchromization finished", with extra1  carrying the
          return value of SyncEvolution sync-call.
        </doc:summary>
      </doc:doc>
      <arg type="s" name="server">
        <doc:doc>
          <doc:summary>Server name, always defined.</doc:summary>
        </doc:doc>
      </arg>
      <arg type="s" name="source">
        <doc:doc>
          <doc:summary>Source name, only defined if this progress event 
            relates to a specific source.</doc:summary>
        </doc:doc>
      </arg>
      <arg type="i" name="type" />
      <arg type="i" name="extra1" />
      <arg type="i" name="extra2" />
      <arg type="i" name="extra3" />
    </signal>

    <signal name="ServerMessage">
      <arg type="s" name="server" />
      <arg type="s" name="message" />
    </signal>


    <signal name="NeedPassword">
      <arg type="s" name="server" />
    </signal>
    <method name="setPassword">
      <!-- no return value, check signals for results -->
      <arg type="s" name="server" direction="in"/>
      <arg type="s" name="password" direction="in"/>
    </method>

    <method name="GetTemplates">
      <arg type="a(sss)" name="templates" direction="out">
        <doc:doc>
          <doc:summary>Template array, where an item consists of template name, 
            web URL and icon URI.
          </doc:summary>
        </doc:doc>
      </arg>
    </method>
    <method name="GetTemplateConfig">
      <arg type="s" name="template" direction="in" />
      <arg type="a(sss)" name="properties" direction="out">
        <doc:doc>
          <doc:summary>Property array, where array consists of source name, property 
            name and property value. Source name can be NULL: when it's not defined the
            the property is not specific to a source (e.g. username)</doc:summary>
        </doc:doc>
      </arg>
    </method>

    <method name="GetServers">
      <arg type="a(sss)" name="servers" direction="out">
        <doc:doc>
          <doc:summary>Server array, where an item consists of server name, 
            web URL and icon URI (the latter two from the corresponding 
            template if it exists).
          </doc:summary>
        </doc:doc>
      </arg>
    </method>
    <method name="GetServerConfig">
      <arg type="s" name="server" direction="in" />
      <arg type="a(sss)" name="properties" direction="out">
        <doc:doc>
          <doc:summary>Property array, where array consists of source name, property 
            name and property value. Source name can be NULL: when it's not defined the
            the property is not specific to a source (e.g. username)</doc:summary>
        </doc:doc>
      </arg>
    </method>
    <method name="SetServerConfig">
      <doc:doc>
        <doc:summary>Updates or creates a Server configuration with given values.
          If a server configuration does not exists, a template of same name is
          used.
        </doc:summary>
      </doc:doc>
      <arg type="s" name="server" direction="in" />
      <arg type="a(sss)" name="properties" direction="in"/>
        <doc:doc>
          <doc:summary>Property array, where array consists of source name, property 
            name and property value. Source name can be NULL: when it's not defined the
            the property is not specific to a source (e.g. username)</doc:summary>
        </doc:doc>
    </method>
    <method name="RemoveServerConfig">
      <arg type="s" name="server" direction="in" />
    </method>

  </interface>
</node>
