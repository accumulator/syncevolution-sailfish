Working with the Code
---------------------

The code follows the code formatting of the Funambol
Sync4j C++ client library. Just emulate the existing
code when possible.

Exceptions are used to report errors, but not in code
which is called from inside the Sync4j library because
that library does not handle exceptions for compatibility
reasons. In that case special case must be taken to not
forget that an error occurred (EvolutionSyncSource::m_hasFailed).

"make check" in the src directory compiles and runs unit
tests. Those tests were written inside the CppUnit
[http://cppunit.sourceforge.net/cppunit-wiki] framework
and so they (and just they) require that "cppunit-config"
is in the shell search path. Before running them, setup
your Evolution and ~/.sync4j configuration as described
in the README section 'Exchanging Data' (create address
books 'SyncEvolution test #1/2', etc).

Running the test with the environment variable SYNC4J_LOG
set to the server's log file ensures that for each
individual sync session both the client and the corresponding
server log are stored in individual files in the src
directory. The filenames are derived from the tests and
the steps executed for each of them.

The first parameter of the "test" program can be used
to select specific tests, like this:
   ./test TestEvolution::testVCard

"make valgrind" runs the same tests inside valgrind
[http://www.valgrind.org]. A suppression file is
used to hide errors inside system libraries which
are not caused by SyncEvolution or Sync4j C++
library code. Most likely the suppressions will only
work on Debian GNU/Linux 3.1 ("Sarge") - feel free
to add more for your system.


CVS
---

Please add your changes to the ChangeLog file. The
Emacs vc-update-change-log = C-x v a command collects
the latest CVS commit messages and adds them automatically.


Building a Release
------------------

- increase version number in configure.in/AM_INIT_AUTOMAKE
- ensure ChangeLog and NEW are up-to-date
- make distcheck
- compile binary packages
